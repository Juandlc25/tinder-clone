{"version":3,"sources":["Components/Header.js","Components/TinderCards.js","Components/Chat.js","Components/Chats.js","Components/SwipeButtons.js","Components/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","className","to","IconButton","fontSize","alt","src","TinderCards","useState","people","map","person","key","name","preventSwipe","style","backgroundImage","url","Chat","profilePic","message","timestamp","Avatar","Chats","SwipeButtons","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","onClick","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c742b742.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\r\n\r\nfunction Header({backButton}) {\r\n    return (\r\n        <div className='header'>\r\n            { backButton ? (\r\n                <>\r\n                    <Link to='/'>\r\n                        <IconButton>\r\n                            <ArrowBackIosIcon className='header__icon' fontSize='large' />\r\n                        </IconButton>\r\n                    </Link>\r\n                    <Link to='/'>\r\n                        <img\r\n                            className='header__logo'\r\n                            alt=''\r\n                            src='https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png'\r\n                        />\r\n                    </Link>\r\n                    <Link to='/chats'>\r\n                        <IconButton>\r\n                            <ForumIcon className='header__icon' fontSize='large' />\r\n                        </IconButton>\r\n                    </Link>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <IconButton>\r\n                        <PersonIcon className='header__icon' fontSize='large' />\r\n                    </IconButton>\r\n                    <Link to='/'>\r\n                        <img\r\n                            className='header__logo'\r\n                            alt=''\r\n                            src='https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png'\r\n                        />\r\n                    </Link>\r\n                    <Link to='/chats'>\r\n                        <IconButton>\r\n                            <ForumIcon className='header__icon' fontSize='large' />\r\n                        </IconButton>\r\n                    </Link>\r\n                </>\r\n            ) }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport './TinderCards.css'\r\nimport TinderCard from 'react-tinder-card'\r\n\r\nfunction TinderCards() {\r\n    const [people, setPeople] = useState([\r\n        {\r\n            'name': 'Steve Jobs',\r\n            'url': 'https://miro.medium.com/max/980/1*vgTONX6EwW9g9eZPuYI7tA.png'\r\n        },\r\n        {\r\n            'name': 'Matt leBlanc',\r\n            'url': 'https://i.pinimg.com/originals/cf/de/8d/cfde8d27378c73ddbb23bc216c1a7bfa.jpg'\r\n        },\r\n        {\r\n            'name': 'Matthew Perry',\r\n            'url': 'https://i.pinimg.com/736x/19/a2/76/19a276cb9e60c7ac7dd4824d72ff415d.jpg'\r\n        },\r\n        {\r\n            'name' : 'David Schwimmer',\r\n            'url': 'https://3gl4jm1hpdltkdx6a1zm3a27-wpengine.netdna-ssl.com/wp-content/uploads/2017/03/DAVID-SCHWIMMER.jpg'\r\n        },\r\n        {\r\n            'name': 'Charlie Sheen',\r\n            'url': 'https://media.apnarm.net.au/media/images/2020/03/11/v3imagesbincd3c4e10a4c1e99418f1e2671548ae11-vnmvn5r8q8g5a028zt2_t1880.jpg'\r\n        }\r\n    ])\r\n    return (\r\n        <div className='tinderCards'>\r\n            <div className='tinderCards__containerCards'>\r\n                {\r\n                    people.map(person => (\r\n                        <TinderCard className='swipe' key={person.name} preventSwipe={['up', 'down']}>\r\n                            <div style={{backgroundImage: `url(${person.url})`}} className='card'>\r\n                                <h3>{person.name}</h3>\r\n                            </div>\r\n                        </TinderCard>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TinderCards\r\n","import React from 'react'\r\nimport './Chat.css'\r\nimport { Avatar } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction Chat({ name, profilePic, message, timestamp}) {\r\n    return (\r\n        <Link to={`/chats/${name}`}>\r\n            <div className='chat'>\r\n                <Avatar\r\n                    className='chat__image'\r\n                    src={profilePic}\r\n                    alt={name}\r\n                />\r\n                <div className='chat__details'>\r\n                    <h2>{name}</h2>\r\n                    <p>{message}</p>\r\n                </div>\r\n                <p className='chat__timestamp'>{timestamp}</p>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react'\r\nimport './Chats.css'\r\nimport Chat from './Chat'\r\n\r\nfunction Chats() {\r\n    return (\r\n        <div className='chats'>\r\n            <Chat\r\n                name='Jennifer'\r\n                message='Hello babe'\r\n                timestamp='24 minutes ago'\r\n                profilePic='https://upload.wikimedia.org/wikipedia/commons/1/16/JenniferAnistonHWoFFeb2012.jpg'\r\n            />\r\n            <Chat\r\n                name='Courtney'\r\n                message='Sorry, now its to late?'\r\n                timestamp='1 hour ago'\r\n                profilePic='https://fotografias.antena3.com/clipping/cmsimages01/2020/05/07/0D1A8072-CED4-4AAB-9F78-544BBA83F960/58.jpg'\r\n            />\r\n            <Chat\r\n                name='Lisa'\r\n                message='Tomorrow works for u?'\r\n                timestamp='5 hours ago'\r\n                profilePic='https://www.instyle.es/medio/2019/05/21/lisa-kudrow_84cfbd05_1280x720.jpg'\r\n            />\r\n            <Chat\r\n                name='SofÃ­a'\r\n                message='Please tell me something...'\r\n                timestamp='2 days ago'\r\n                profilePic='https://files.lafm.com.co/assets/public/2019-08/sofia_vergara_2.jpg'\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React from 'react'\r\nimport './SwipeButtons.css'\r\nimport ReplayIcon from '@material-ui/icons/Replay'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport StarRateIcon from '@material-ui/icons/StarRate';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn'\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nfunction SwipeButtons() {\r\n    return (\r\n        <div className='swipeButtons'>\r\n            <IconButton className='swipeButtons__repeat'><ReplayIcon fontSize='large' /></IconButton>\r\n            <IconButton className='swipeButtons__left'><CloseIcon fontSize='large' /></IconButton>\r\n            <IconButton className='swipeButtons__star'><StarRateIcon fontSize='large' /></IconButton>\r\n            <IconButton className='swipeButtons__right'><FavoriteIcon fontSize='large' /></IconButton>\r\n            <IconButton className='swipeButtons__lightning'><FlashOnIcon fontSize='large' /></IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons\r\n","import React, { useState } from 'react'\r\nimport './ChatScreen.css'\r\nimport { Avatar } from '@material-ui/core'\r\n\r\nfunction ChatScreen() {\r\n    const [input, setInput] = useState('')\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            name: 'Jennifer',\r\n            image: 'https://upload.wikimedia.org/wikipedia/commons/1/16/JenniferAnistonHWoFFeb2012.jpg',\r\n            message: 'Whats up?'\r\n        },\r\n        {\r\n            name: 'Jennifer',\r\n            image: 'https://upload.wikimedia.org/wikipedia/commons/1/16/JenniferAnistonHWoFFeb2012.jpg',\r\n            message: 'Hows it going?'\r\n        },\r\n        {\r\n            message: 'Hi! how are u mor'\r\n        }\r\n    ])\r\n\r\n    const handleSend = (e) => {\r\n        e.preventDefault();\r\n        setMessages([...messages, {message: input}])\r\n        setInput('')\r\n    }\r\n    return (\r\n        <div className='chatScreen'>\r\n            <p className='chatScreen__timestamp'>YOU MATCHED WITH Jennifer ON 10/08/20</p>\r\n            {\r\n                messages.map(message => (\r\n                    message.name ? (\r\n                        <div className='chatScreen__message'>\r\n                            <Avatar\r\n                                className='chatScreen__image'\r\n                                alt={message.name}\r\n                                src={message.image}\r\n                            />\r\n                            <p className='chatScreen__text'>{message.message}</p>\r\n                        </div>\r\n                    ) : (\r\n                        <div className='chatScreen__message'>\r\n                            <p className='chatScreen__textUser'>{message.message}</p>\r\n                        </div>\r\n                    )\r\n                ))\r\n            }\r\n            <form className='chatScreen__input'>\r\n                <input\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder='Type a message'\r\n                    type='text'\r\n                    className='chatScreen__inputField'\r\n                />\r\n                <button\r\n                    type='submit'\r\n                    className='chatScreen__inputButton'\r\n                    onClick={handleSend}\r\n                >\r\n                    SEND\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatScreen\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TinderCards from './Components/TinderCards'\nimport Chats from './Components/Chats'\nimport SwipeButtons from './Components/SwipeButtons';\nimport ChatScreen from './Components/ChatScreen';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n        <Route path='/chats/:person'>\n            <Header backButton='/' />\n              <ChatScreen />\n          </Route>\n          <Route path='/chats'>\n            <Header backButton />\n            <Chats />\n          </Route>\n          <Route path='/'>\n            <Header />\n            <TinderCards />\n            <SwipeButtons />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}